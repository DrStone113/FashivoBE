// middleware/errorMiddleware.js
const AppError = require('../utils/appError');

const handleCastErrorDB = err => {
  const message = `Dá»¯ liá»‡u khÃ´ng há»£p lá»‡ cho ${err.path}: ${err.value}.`;
  return new AppError(message, 400);
};

const handleDuplicateFieldsDB = err => {
  const value = err.keyValue.name || Object.keys(err.keyValue)[0];
  const message = `GiÃ¡ trá»‹ trÃ¹ng láº·p: "${value}". Vui lÃ²ng sá»­ dá»¥ng giÃ¡ trá»‹ khÃ¡c!`;
  return new AppError(message, 400);
};

const handleValidationErrorDB = err => {
  const errors = Object.values(err.errors).map(el => el.message);
  const message = `Dá»¯ liá»‡u Ä‘áº§u vÃ o khÃ´ng há»£p lá»‡. ${errors.join('. ')}`;
  return new AppError(message, 400);
};

const handleJWTError = () => new AppError('Token khÃ´ng há»£p lá»‡. Vui lÃ²ng Ä‘Äƒng nháº­p láº¡i!', 401);

const handleJWTExpiredError = () => new AppError('Token cá»§a báº¡n Ä‘Ã£ háº¿t háº¡n! Vui lÃ²ng Ä‘Äƒng nháº­p láº¡i.', 401);

const sendErrorDev = (err, res) => {
  res.status(err.statusCode).json({
    status: err.status,
    error: err,
    message: err.message,
    stack: err.stack
  });
};

const sendErrorProd = (err, res) => {
  // Operational, trusted error: send message to client
  if (err.isOperational) {
    res.status(err.statusCode).json({
      status: err.status,
      message: err.message
    });

  // Programming or other unknown error: don't leak error details
  } else {
    // 1) Log error
    console.error('ERROR ðŸ’¥', err);

    // 2) Send generic message
    res.status(500).json({
      status: 'error',
      message: 'CÃ³ lá»—i xáº£y ra trÃªn server!'
    });
  }
};

module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.status = err.status || 'error';

  if (process.env.NODE_ENV === 'development') {
    sendErrorDev(err, res);
  } else if (process.env.NODE_ENV === 'production') {
    let error = { ...err };
    error.message = err.message; // Ensure message is copied

    if (error.name === 'CastError') error = handleCastErrorDB(error);
    if (error.code === '23505') error = handleDuplicateFieldsDB(error); // PostgreSQL duplicate key error code
    if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
    if (error.name === 'JsonWebTokenError') error = handleJWTError();
    if (error.name === 'TokenExpiredError') error = handleJWTExpiredError();

    sendErrorProd(error, res);
  }
};